meta:
  project: grapl
  default: build

#
# mounts
#

# Cache

mount=sccache:
  bind: ~/.cache/sccache
  path: /grapl/.cache/sccache

mount=pip-download-cache:
  bind: ~/.cache/pip
  path: /grapl/.cache/pip

# Rust

mount=rust-dist:
  bind: dist/rust
  path: /grapl/target

mount=rust-Cargo-toml:
  bind: src/rust/Cargo.toml
  path: /grapl/Cargo.toml
  read-only: true

mount=rust-Cargo-lock:
  bind: src/rust/Cargo.lock
  path: /grapl/Cargo.lock
  read-only: true

mount=rust-analyzer-dispatcher:
  bind: src/rust/analyzer-dispatcher
  path: /grapl/analyzer-dispatcher
  read-only: true

mount=rust-derive-dynamic-node:
  bind: src/rust/derive-dynamic-node
  path: /grapl/derive-dynamic-node
  read-only: true

mount=rust-generic-subgraph-generator:
  bind: src/rust/generic-subgraph-generator
  path: /grapl/generic-subgraph-generator
  read-only: true

mount=rust-graph-descriptions:
  bind: src/rust/graph-descriptions
  path: /grapl/graph-descriptions
  read-only: true

mount=rust-graph-generator-lib:
  bind: src/rust/graph-generator-lib
  path: /grapl/graph-generator-lib
  read-only: true

mount=rust-graph-merger:
  bind: src/rust/graph-merger
  path: /grapl/graph-merger
  read-only: true

mount=rust-grapl-config:
  bind: src/rust/grapl-config
  path: /grapl/grapl-config
  read-only: true

mount=rust-grapl-observe:
  bind: src/rust/grapl-observe
  path: /grapl/grapl-observe
  read-only: true

mount=rust-metric-forwarder:
  bind: src/rust/metric-forwarder
  path: /grapl/metric-forwarder
  read-only: true

mount=rust-node-identifier:
  bind: src/rust/node-identifier
  path: /grapl/node-identifier
  read-only: true

mount=rust-sysmon-subgraph-generator:
  bind: src/rust/sysmon-subgraph-generator
  path: /grapl/sysmon-subgraph-generator
  read-only: true

# Python

mount=python-zip:
  bind: dist/python/zip
  path: /grapl/dist

mount=grapl-python-dist:
  bind: dist/python
  path: /grapl/dist

mount=python-grapl-libs-venv:
  bind: dist/python/grapl-libs/venv
  path: /grapl/grapl-libs/venv

# grapl-common
mount=python-grapl-common-src:
  bind: src/python/grapl-common
  path: /grapl/src/grapl-common
  read-only: true

mount=python-grapl-common-dist:
  bind: dist/python/grapl-common
  path: /grapl/build/grapl-common

# graph-descriptions
mount=python-graph-descriptions-src:
  # Note: this is actually a Rust path
  bind: src/rust/graph-descriptions
  path: /grapl/src/graph-descriptions
  read-only: true

mount=python-graph-descriptions-dist:
  # Note: this is actually a Rust path
  bind: dist/python/graph-descriptions
  path: /grapl/build/graph-descriptions

# grapl-analyzerlib
mount=python-grapl-analyzerlib-src:
  bind: src/python/grapl_analyzerlib
  path: /grapl/src/grapl_analyzerlib
  read-only: true

mount=python-grapl-analyzerlib-dist:
  bind: dist/python/grapl_analyzerlib
  path: /grapl/build/grapl_analyzerlib

# analyzer-deployer
mount=python-analyzer-deployer-src:
  bind: src/python/analyzer-deployer
  path: /grapl/analyzer-deployer
  read-only: true

mount=python-analyzer-deployer-venv:
  bind: dist/python/analyzer-deployer/venv
  path: /grapl/venv

# analyzer-executor
mount=python-analyzer-executor-src:
  bind: src/python/analyzer_executor
  path: /grapl/analyzer_executor
  read-only: true

mount=python-analyzer-executor-venv:
  bind: dist/python/analyzer_executor/venv
  path: /grapl/venv

# engagement-creator
mount=python-engagement-creator-src:
  bind: src/python/engagement-creator
  path: /grapl/engagement-creator
  read-only: true

mount=python-engagement-creator-venv:
  bind: dist/python/engagement-creator/venv
  path: /grapl/venv

# engagement-edge
mount=python-engagement-edge-src:
  bind: src/python/engagement_edge
  path: /grapl/engagement_edge
  read-only: true

mount=python-engagement-edge-venv:
  bind: dist/python/engagement_edge/venv
  path: /grapl/venv

mount=python-engagement-edge-app:
  bind: dist/python/engagement_edge/chalice
  path: /grapl/chalice

# dgraph-ttl
mount=python-dgraph-ttl-src:
  bind: src/python/grapl-dgraph-ttl
  path: /grapl/grapl-dgraph-ttl
  read-only: true

mount=python-dgraph-ttl-venv:
  bind: dist/python/dgraph-ttl/venv
  path: /grapl/venv

# model-plugin-deployer
mount=python-model-plugin-deployer-src:
  bind: src/python/grapl-model-plugin-deployer
  path: /grapl/grapl-model-plugin-deployer
  read-only: true

mount=python-model-plugin-deployer-venv:
  bind: dist/python/grapl-model-plugin-deployer/venv
  path: /grapl/venv

mount=python-model-plugin-deployer-app:
  bind: dist/python/grapl-model-plugin-deployer/chalice
  path: /grapl/chalice

# JS

mount=js-zip:
  bind: dist/js/zip
  path: /home/node/zip

# engagement-view
mount=js-engagement-view-src:
  bind: src/js/engagement_view
  path: /home/node/engagement_view

mount=js-engagement-view-dist:
  bind: dist/js/engagement_view
  path: /home/node/dist

# graphql-endpoint
mount=js-graphql-endpoint-src:
  bind: src/js/graphql_endpoint
  path: /home/node/graphql_endpoint

mount=js-graphql-endpoint-dist:
  bind: dist/js/graphql_endpoint
  path: /home/node/dist

#
# Images
#

# Rust

image=rust-build-image:
  image: grapl-rust-build
  # We don't need or want context, but dobi won't let us not.
  # You don't need one for Docker with inline Dockerfile.
  # This should point to a near empty directory to reduce copy time
  context: docker
  dockerfile: Dockerfile.rust-base
  args:
    UID: "{user.uid}"
    GID: "{user.gid}"
  tags:
    - latest

image=python-build-image:
  image: grapl-python-build
  context: docker
  dockerfile: Dockerfile.python-base
  args:
    UID: "{user.uid}"
    GID: "{user.gid}"
  tags:
    - latest

image=js-build-image:
  image: grapl-js-build
  context: docker
  dockerfile: Dockerfile.js-base
  tags:
    - latest

#
# Builds
#

# aliases

alias=build:
  tasks:
    - build-rust
    - build-python
    - build-js
  annotations:
    description: "Build it all"

alias=build-python:
  tasks:
    - build-python-grapl-libs
    - build-python-analyzer-deployer
    - build-python-analyzer-executor
    - build-python-engagement-creator
    - build-python-engagement-edge
    - build-python-dgraph-ttl
    - build-python-model-plugin-deployer
  annotations:
    description: "Build all Python sources"

alias=build-js:
  tasks:
    - build-js-engagement-view
    - build-js-graphql-endpoint
  annotations:
    description: "Build all JS sources"

# Rust build

job=build-rust:
  use: rust-build-image
  mounts: 
    - rust-Cargo-toml
    - rust-Cargo-lock
    - rust-dist
    - sccache
    - rust-analyzer-dispatcher
    - rust-derive-dynamic-node
    - rust-generic-subgraph-generator
    - rust-graph-descriptions
    - rust-graph-generator-lib
    - rust-graph-merger
    - rust-grapl-config
    - rust-grapl-observe
    - rust-metric-forwarder
    - rust-node-identifier
    - rust-sysmon-subgraph-generator
  command: bash -c "cargo build --target=x86_64-unknown-linux-musl && sccache -s"
  env:
    - "RUSTC_WRAPPER=/usr/bin/sccache"
  sources:
    # basicaly everything except target/
    - src/rust/Cargo.toml
    - src/rust/Cargo.lock
    - src/rust/analyzer-dispatcher
    - src/rust/derive-dynamic-node
    - src/rust/generic-subgraph-generator
    - src/rust/graph-descriptions
    - src/rust/graph-generator-lib
    - src/rust/graph-merger
    - src/rust/grapl-config
    - src/rust/grapl-observe
    - src/rust/metric-forwarder
    - src/rust/node-identifier
    - src/rust/sysmon-subgraph-generator
  artifact:
    - dist/rust
  annotations:
    description: "Build Rust sources"

# same as build-rust, but for unit tests, it's way faster to do this than
# to make a separate job, which causes recompile.
job=rust-build-and-test:
  use: rust-build-image
  mounts: 
    - rust-Cargo-toml
    - rust-Cargo-lock
    - rust-dist
    - sccache
    - rust-analyzer-dispatcher
    - rust-derive-dynamic-node
    - rust-generic-subgraph-generator
    - rust-graph-descriptions
    - rust-graph-generator-lib
    - rust-graph-merger
    - rust-grapl-config
    - rust-grapl-observe
    - rust-metric-forwarder
    - rust-node-identifier
    - rust-sysmon-subgraph-generator
  command: 
    bash -c "
    cargo build --target=x86_64-unknown-linux-musl &&
    cargo test --target=x86_64-unknown-linux-musl &&
    sccache -s"
  env:
    - "RUSTC_WRAPPER=/usr/bin/sccache"
  sources:
    # basicaly everything except target/
    - src/rust/Cargo.toml
    - src/rust/Cargo.lock
    - src/rust/analyzer-dispatcher
    - src/rust/derive-dynamic-node
    - src/rust/generic-subgraph-generator
    - src/rust/graph-descriptions
    - src/rust/graph-generator-lib
    - src/rust/graph-merger
    - src/rust/grapl-config
    - src/rust/grapl-observe
    - src/rust/metric-forwarder
    - src/rust/node-identifier
    - src/rust/sysmon-subgraph-generator
  artifact:
    - dist/rust
  annotations:
    description: "Build Rust sources"

# Python build

# grapl-common grapl_analyzerlib graph-descriptions
job=build-python-grapl-libs:
  use: python-build-image
  mounts:
    - pip-download-cache
    - python-grapl-libs-venv
    - python-grapl-common-src
    - python-grapl-common-dist
    - python-graph-descriptions-src
    - python-graph-descriptions-dist
    - python-grapl-analyzerlib-src
    - python-grapl-analyzerlib-dist
  command: 
    bash -c "
    source venv/bin/activate &&
    cp -r ~/src/grapl-common/. ~/build/grapl-common/ &&
    cd ~/build/grapl-common && pip install . && python setup.py sdist bdist_wheel &&
    cp -r ~/src/graph-descriptions/. ~/build/graph-descriptions/ &&
    cd ~/build/graph-descriptions && pip install . && python setup.py sdist bdist_wheel && 
    cp -r ~/src/grapl_analyzerlib/. ~/build/grapl_analyzerlib/ &&
    cd ~/build/grapl_analyzerlib && pip install . && python setup.py sdist bdist_wheel &&
    cp -r ~/venv/. ~/grapl-libs/venv/"
  sources:
    - src/python/grapl-common
    - src/rust/graph-descriptions
    - src/python/grapl_analyzerlib
  artifact:
    - dist/python/grapl-libs
    - dist/python/grapl-common
    - dist/python/graph-descriptions
    - dist/python/grapl_analyzerlib
  annotations:
    description: "Build grapl-common, graph-descriptions and grapl-analyzerlib"

# analyzer-deployer
job=build-python-analyzer-deployer:
  use: python-build-image
  mounts:
    - pip-download-cache
    - python-zip
    - python-grapl-libs-venv
    - python-analyzer-deployer-src
    - python-analyzer-deployer-venv
  command: 
    bash -c "
    cp -r ~/grapl-libs/venv/. ~/venv/ &&
    source venv/bin/activate &&
    pip install -r analyzer-deployer/requirements.txt &&
    python -m mypy_boto3 &&
    cd ~/venv/lib/python3.7/site-packages && zip --quiet -9r ~/dist/analyzer-deployer.zip . &&
    zip -g ~/dist/analyzer-deployer.zip ~/analyzer-deployer/analyzer_deployer/app.py"
  sources:
    - src/python/analyzer-deployer
  artifact:
    - dist/python/zip/analyzer-deployer.zip
    - dist/python/analyzer-deployer/venv
  depends:
    - build-python-grapl-libs

# analyzer-executor
job=build-python-analyzer-executor:
  use: python-build-image
  mounts:
    - pip-download-cache
    - python-zip
    - python-grapl-libs-venv
    - python-analyzer-executor-src
    - python-analyzer-executor-venv
  command: 
    bash -c "
    cp -r ~/grapl-libs/venv/. ~/venv/ &&
    source venv/bin/activate &&
    pip install -r analyzer_executor/requirements.txt &&
    cd ~/venv/lib/python3.7/site-packages && zip --quiet -9r ~/dist/analyzer-executor.zip . &&
    zip -g ~/dist/analyzer-executor.zip ~/analyzer_executor/src/analyzer-executor.py"
  sources:
    - src/python/analyzer_executor
  artifact:
    - dist/python/zip/analyzer-executor.zip
    - dist/python/analyzer_executor
  depends:
    - build-python-grapl-libs

# engagement-creator
job=build-python-engagement-creator:
  use: python-build-image
  mounts:
    - pip-download-cache
    - python-zip
    - python-grapl-libs-venv
    - python-engagement-creator-src
    - python-engagement-creator-venv
  command: 
    bash -c "
    cp -r ~/grapl-libs/venv/. ~/venv/ &&
    source venv/bin/activate &&
    pip install -r ~/engagement-creator/requirements.txt &&
    cd ~/venv/lib/python3.7/site-packages && zip --quiet -9r ~/dist/engagement-creator.zip . && 
    zip -g ~/dist/engagement-creator.zip ~/engagement-creator/src/engagement-creator.py"
  sources:
    - src/python/engagement-creator
  artifact:
    - dist/python/zip/engagement-creator.zip
    - dist/python/engagement-creator
  depends:
    - build-python-grapl-libs

# engagement_edge
job=build-python-engagement-edge:
  use: python-build-image
  mounts:
    - pip-download-cache
    - python-zip
    - python-grapl-libs-venv
    - python-engagement-edge-src
    - python-engagement-edge-venv
    - python-engagement-edge-app
  command: 
    bash -c "
    cp -r ~/grapl-libs/venv/. ~/venv/ &&
    source venv/bin/activate &&
    pip install -r engagement_edge/requirements.txt &&
    chalice new-project ~/new-app && cp ~/engagement_edge/src/engagement_edge.py ~/new-app/app.py &&
    cp -r ~/new-app/. ~/chalice &&
    cd ~/venv/lib/python3.7/site-packages && zip --quiet -9r ~/dist/engagement-edge.zip . &&
    zip -g ~/dist/engagement-edge.zip ~/engagement_edge/src/engagement_edge.py"
  sources:
    - src/python/engagement_edge
  artifact:
    - dist/python/zip/engagement-edge.zip
    - dist/python/engagement_edge
  depends:
    - build-python-grapl-libs

# dgraph-ttl
job=build-python-dgraph-ttl:
  use: python-build-image
  mounts:
    - pip-download-cache
    - python-zip
    - python-grapl-libs-venv
    - python-dgraph-ttl-src
    - python-dgraph-ttl-venv
  command:
    bash -c "
    cp -r ~/grapl-libs/venv/. ~/venv/ &&
    source venv/bin/activate &&
    pip install -r grapl-dgraph-ttl/requirements.txt &&
    cd ~/venv/lib/python3.7/site-packages && zip --quiet -9r ~/dist/dgraph-ttl.zip . && 
    zip -g ~/dist/dgraph-ttl.zip ~/grapl-dgraph-ttl/app.py"
  sources:
    - src/python/grapl-dgraph-ttl
  artifact:
    - dist/python/zip/dgraph-ttl.zip
    - dist/python/dgraph-ttl
  depends:
    - build-python-grapl-libs

# model-plugin-deployer
job=build-python-model-plugin-deployer:
  use: python-build-image
  mounts:
    - pip-download-cache
    - python-zip
    - python-grapl-libs-venv
    - python-model-plugin-deployer-src
    - python-model-plugin-deployer-venv
    - python-model-plugin-deployer-app
  command: 
    bash -c "
    cp -r ~/grapl-libs/venv/. ~/venv/ &&
    source venv/bin/activate &&
    pip install -r grapl-model-plugin-deployer/requirements.txt &&
    chalice new-project ~/new-app && cp ~/grapl-model-plugin-deployer/src/grapl_model_plugin_deployer.py ~/new-app/app.py &&
    cp -r ~/new-app/. ~/chalice &&
    cd ~/venv/lib/python3.7/site-packages && zip --quiet -9r ~/dist/model-plugin-deployer.zip . &&
    zip -g ~/dist/model-plugin-deployer.zip ~/grapl-model-plugin-deployer/src/grapl_model_plugin_deployer.py"
  sources:
    - src/python/grapl-model-plugin-deployer
  artifact:
    - dist/python/zip/model-plugin-deployer.zip
    - dist/python/grapl-model-plugin-deployer
  depends:
    - build-python-grapl-libs

# JS Build

# engagement-view
job=build-js-engagement-view:
  use: js-build-image
  mounts:
    - js-engagement-view-src
    - js-engagement-view-dist
  command: bash -c "cd engagement_view && yarn install && yarn build && cp -r build/. /home/node/dist/"
  sources:
    - src/js/engagement_view/src
    - src/js/engagement_view/public
    - src/js/engagement_view/build.sh
    - src/js/engagement_view/package.json
    - src/js/engagement_view/package-lock.json
    - src/js/engagement_view/tsconfig.json
    - src/js/engagement_view/yarn.lock
  artifact:
    - dist/js/engagement_view/index.html

# graphql-endpoint
job=build-js-graphql-endpoint:
  use: js-build-image
  mounts:
    - js-zip
    - js-graphql-endpoint-src
    - js-graphql-endpoint-dist
  command:
    bash -c "
    cd graphql_endpoint && rm -rf node_modules && npm i &&
    cp -r ~/graphql_endpoint/node_modules/ ~/dist/ &&
    cp -r ~/graphql_endpoint/modules/ ~/dist/ &&
    cp -r ~/graphql_endpoint/server.js ~/dist/ &&
    cp -r ~/graphql_endpoint/package.json ~/dist/ &&
    cp -r ~/graphql_endpoint/package-lock.json ~/dist/ &&
    cd ~/dist && zip --quiet -9r ~/zip/graphql_endpoint.zip ."
  sources:
    - src/js/graphql_endpoint/package.json
    - src/js/graphql_endpoint/package-lock.json
    - src/js/graphql_endpoint/server.js
  artifact:
    - dist/js/graphql_endpoint
    - dist/js/zip/graphql_endpoint.zip

# TODO: CDK

#
# Test
#

alias=tests:
  tasks:
    - unit-tests
    - integration-tests
  annotations:
    description: "Run all tests"

#
# Unit tests
#

alias=unit-tests:
  tasks:
    - run-rust-unit-tests
    - python-unit-tests
    - js-unit-tests
  annotations:
    description: "Run all unit tests"

# Rust
job=run-rust-unit-tests:
  use: rust-build-image
  mounts: 
    - rust-Cargo-toml
    - rust-Cargo-lock
    - rust-dist
    - sccache
    - rust-analyzer-dispatcher
    - rust-derive-dynamic-node
    - rust-generic-subgraph-generator
    - rust-graph-descriptions
    - rust-graph-generator-lib
    - rust-graph-merger
    - rust-grapl-config
    - rust-grapl-observe
    - rust-metric-forwarder
    - rust-node-identifier
    - rust-sysmon-subgraph-generator
  command: cargo test --target=x86_64-unknown-linux-musl
  env:
    - "RUSTC_WRAPPER=/usr/bin/sccache"
  sources:
    # basicaly everything except target/
    - src/rust/Cargo.toml
    - src/rust/Cargo.lock
    - src/rust/analyzer-dispatcher
    - src/rust/derive-dynamic-node
    - src/rust/generic-subgraph-generator
    - src/rust/graph-descriptions
    - src/rust/graph-generator-lib
    - src/rust/graph-merger
    - src/rust/grapl-config
    - src/rust/grapl-observe
    - src/rust/metric-forwarder
    - src/rust/node-identifier
    - src/rust/sysmon-subgraph-generator
  artifact:
    - dist/rust
  annotations:
    description: "Rust cargo test"

# Python

alias=python-unit-tests:
  tasks:
    - run-grapl-common-unit-tests
    - run-grapl-analyzerlib-unit-tests
    - run-analyzer-deployer-unit-tests
    - run-analyzer-executor-unit-tests
    - run-engagement-creator-unit-tests
    - run-engagement-edge-unit-tests
    - run-dgraph-ttl-unit-tests
    - run-model-plugin-deployer-unit-tests
  annotations:
    description: "Run Python unit tests"

# grapl-common
job=run-grapl-common-unit-tests:
  use: python-build-image
  mounts:
    - python-grapl-libs-venv
    - python-grapl-common-dist
  command: 
    bash -c "
    cp -r ~/grapl-libs/venv/. ~/venv/ &&
    source venv/bin/activate && 
    cd ~/build/grapl-common/tests && 
    py.test -n auto -m 'not integration_test'"

# grapl-analyzerlib
job=run-grapl-analyzerlib-unit-tests:
  use: python-build-image
  mounts:
    - python-grapl-libs-venv
    - python-grapl-analyzerlib-dist
  command: 
    bash -c "
    cp -r ~/grapl-libs/venv/. ~/venv/ &&
    source venv/bin/activate &&
    cd build/grapl_analyzerlib &&
    py.test -n auto -m 'not integration_test'"

# analyzer-deployer
job=run-analyzer-deployer-unit-tests:
  use: python-build-image
  mounts:
    - python-analyzer-deployer-venv
    - python-analyzer-deployer-src
  command: 
    bash -c "
    source venv/bin/activate &&
    cp -r ~/analyzer-deployer test &&
    cd test &&
    py.test -n auto -m 'not integration_test'"

# analyzer-executor
job=run-analyzer-executor-unit-tests:
  use: python-build-image
  mounts:
    - python-analyzer-executor-venv
    - python-analyzer-executor-src
  command:
    bash -c "
    source venv/bin/activate &&
    cp -r ~/analyzer_executor test &&
    cd test &&
    py.test -n auto -m 'not integration_test'"

# engagement-creator
job=run-engagement-creator-unit-tests:
  use: python-build-image
  mounts:
    - python-engagement-creator-venv
    - python-engagement-creator-src
  command:
    bash -c "
    source venv/bin/activate &&
    cp -r ~/engagement-creator test &&
    cd test &&
    py.test -n auto -m 'not integration_test'"

# engagement-edge
job=run-engagement-edge-unit-tests:
  use: python-build-image
  mounts:
    - python-engagement-edge-venv
    - python-engagement-edge-src
  command:
    bash -c "
    source venv/bin/activate &&
    cp -r ~/engagement_edge test &&
    cd test &&
    py.test -n auto -m 'not integration_test'"

# dgraph-ttl
job=run-dgraph-ttl-unit-tests:
  use: python-build-image
  mounts:
    - python-dgraph-ttl-venv
    - python-dgraph-ttl-src
  command:
    bash -c "
    source venv/bin/activate &&
    cp -r ~/grapl-dgraph-ttl test &&
    cd test &&
    py.test -n auto -m 'not integration_test'"

# model-plugin-deployer
job=run-model-plugin-deployer-unit-tests:
  use: python-build-image
  mounts:
    - python-model-plugin-deployer-venv
    - python-model-plugin-deployer-src
  command:
    bash -c "
    source venv/bin/activate &&
    cp -r ~/grapl-model-plugin-deployer test &&
    cd test &&
    py.test -n auto -m 'not integration_test'"

# JS

alias=js-unit-tests:
  tasks:
    - run-engagement-view-unit-tests
  annotations:
    description: "Run the js unit tests"

job=run-engagement-view-unit-tests:
  use: js-build-image
  mounts: 
    - js-engagement-view-src
  command: /bin/bash -c "cd engagement_view && CI=true yarn test"

#
# Integration tests
#

alias=integration-tests:
  tasks:
    - run-grapl-analyzerlib-integration-tests
    - run-node-identifier-integration-tests
    - run-analyzer-deployer-integration-tests
  annotations:
    description: "Run integration tests"

job=run-grapl-analyzerlib-integration-tests:
  use: python-build-image
  net-mode: grapl-integration-tests_default
  mounts:
    - python-grapl-libs-venv
    - python-grapl-analyzerlib-dist
  command: 
    bash -c "
    sleep 30 &&
    cp -r ~/grapl-libs/venv/. ~/venv/ &&
    source venv/bin/activate &&
    cd build/grapl_analyzerlib &&
    py.test -n auto -m 'integration_test'"
  env:
    - GRAPL_LOG_LEVEL=INFO
    - BUCKET_PREFIX=local-grapl
    - IS_LOCAL=True
    - MG_ALPHAS=grapl-master-graph-db:9080
  depends:
    - integration-env

job=run-analyzer-deployer-integration-tests:
  use: python-build-image
  net-mode: grapl-integration-tests_default
  mounts:
    - python-analyzer-deployer-venv
    - python-analyzer-deployer-src
  command:
    bash -c "
    sleep 30 &&
    source venv/bin/activate &&
    cp -r ~/analyzer-deployer test &&
    cd test &&
    py.test -n auto -m 'integration_test'"
  env:
    - GRAPL_LOG_LEVEL=INFO
    - BUCKET_PREFIX=local-grapl
    - IS_LOCAL=True
  depends:
    - integration-env

job=run-node-identifier-integration-tests:
  use: rust-build-image
  net-mode: grapl-integration-tests_default
  mounts:
    - rust-Cargo-toml
    - rust-Cargo-lock
    - rust-dist
    - sccache
    - rust-analyzer-dispatcher
    - rust-derive-dynamic-node
    - rust-generic-subgraph-generator
    - rust-graph-descriptions
    - rust-graph-generator-lib
    - rust-graph-merger
    - rust-grapl-config
    - rust-grapl-observe
    - rust-metric-forwarder
    - rust-node-identifier
    - rust-sysmon-subgraph-generator
  command:
    bash -c "
    sleep 30 &&
    cargo test --target=x86_64-unknown-linux-musl --manifest-path node-identifier/Cargo.toml --features integration"
  env:
    - GRAPL_LOG_LEVEL=INFO
    - RUST_LOG=INFO
    - RUST_BACKTRACE=1
    - BUCKET_PREFIX=local-grapl
    - IS_LOCAL=True
    - MG_ALPHAS=grapl-master-graph-db:9080
    - SOURCE_QUEUE_URL=http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-node-identifier-retry-queue
    - GRAPH_MERGER_QUEUE_URL=http://sqs.us-east-1.amazonaws.com:9324/queue/grapl-graph-merger-queue
    - STATIC_MAPPING_TABLE=local-grapl-static_mapping_table
    - DYNAMIC_SESSION_TABLE=local-grapl-dynamic_session_table
    - PROCESS_HISTORY_TABLE=local-grapl-process_history_table
    - FILE_HISTORY_TABLE=local-grapl-file_history_table
    - INBOUND_CONNECTION_HISTORY_TABLE=local-grapl-inbound_connection_history_table
    - OUTBOUND_CONNECTION_HISTORY_TABLE=local-grapl-outbound_connection_history_table
    - NETWORK_CONNECTION_HISTORY_TABLE=local-grapl-network_connection_history_table
    - IP_CONNECTION_HISTORY_TABLE=local-grapl-ip_connection_history_table
    - ASSET_ID_MAPPINGS=local-grapl-asset_id_mappings
  depends:
    - build-rust
    - integration-env

#
# Python type check
#

alias=python-typecheck:
  tasks:
    # TODO: Add more and more here!
    - run-analyzer-deployer-typecheck
    - run-engagement-creator-typecheck
    - run-grapl-common-typecheck
  annotations:
    description: "Run mypy or pytype type checks on a subset of our Python libs/services"

# analyzer-deployer
job=run-analyzer-deployer-typecheck:
  use: python-build-image
  mounts:
    - pip-download-cache
    - python-analyzer-deployer-venv
    - python-analyzer-deployer-src
  command:
    bash -c "
    source venv/bin/activate &&
    touch venv/lib/python3.7/site-packages/chalice/py.typed &&
    cd analyzer-deployer &&
    pip install mypy &&
    mypy ."

# engagement-creator
job=run-engagement-creator-typecheck:
  use: python-build-image
  mounts:
    - pip-download-cache
    - python-engagement-creator-venv
    - python-engagement-creator-src
  command:
    bash -c "
    source venv/bin/activate &&
    cd engagement-creator &&
    pip install '.[typecheck]' &&
    mypy ."

# grapl-common
job=run-grapl-common-typecheck:
  use: python-build-image
  mounts:
    - pip-download-cache
    - python-grapl-libs-venv
    - python-grapl-common-dist
  command:
    bash -c "
    cp -r ~/grapl-libs/venv/. ~/venv/ &&
    source venv/bin/activate &&
    cd ~/build/grapl-common &&
    pip install '.[typecheck]' &&
    mypy ."

#
# Local Grapl
#

compose=integration-env:
  files:
    - docker-compose.yml
  project: grapl-integration-tests
  depends:
    - build

#
# House keeping
#

alias=clean:
  tasks:
    - clean-rust-build
    - clean-python-build
    - clean-js-build
  annotations:
    description: "Delete all the build images"

alias=clean-rust-build:
  tasks:
    - rust-build-image:rm
  annotations:
    description: "Delete the Rust build image"

alias=clean-python-build:
  tasks:
    - python-build-image:rm
  annotations:
    description: "Delete the Python build image"

alias=clean-js-build:
  tasks:
    - js-build-image:rm
  annotations:
    description: "Delete the JavaScript build image"

